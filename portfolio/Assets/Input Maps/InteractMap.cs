//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input Maps/InteractMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InteractMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InteractMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InteractMap"",
    ""maps"": [
        {
            ""name"": ""InteractionMap"",
            ""id"": ""8575d859-9bf1-4584-bb23-6d1bdb602387"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""4e8e3778-d3a5-49e6-9f19-041df232be07"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1928b91b-e610-4319-bab0-62ea1dd02882"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InteractionMap
        m_InteractionMap = asset.FindActionMap("InteractionMap", throwIfNotFound: true);
        m_InteractionMap_Interact = m_InteractionMap.FindAction("Interact", throwIfNotFound: true);
    }

    ~@InteractMap()
    {
        UnityEngine.Debug.Assert(!m_InteractionMap.enabled, "This will cause a leak and performance issues, InteractMap.InteractionMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InteractionMap
    private readonly InputActionMap m_InteractionMap;
    private List<IInteractionMapActions> m_InteractionMapActionsCallbackInterfaces = new List<IInteractionMapActions>();
    private readonly InputAction m_InteractionMap_Interact;
    public struct InteractionMapActions
    {
        private @InteractMap m_Wrapper;
        public InteractionMapActions(@InteractMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_InteractionMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_InteractionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionMapActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionMapActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IInteractionMapActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IInteractionMapActions instance)
        {
            if (m_Wrapper.m_InteractionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionMapActions @InteractionMap => new InteractionMapActions(this);
    public interface IInteractionMapActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
